# Generated by Django 2.2.3 on 2019-09-15 13:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_chat_id', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Backend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messenger', models.CharField(choices=[('SimplePrintMessenger', 'SimplePrintMessenger'), ('SimplePrintMessengerTemplateBased', 'SimplePrintMessengerTemplateBased'), ('SMTPEmailMessenger', 'SMTPEmailMessenger'), ('TelegramBotMessenger', 'TelegramBotMessenger')], default='BaseMessanger', max_length=128)),
                ('message_template', models.CharField(choices=[('BaseMessageTemplate', 'BaseMessageTemplate'), ('SimpleEmailMessageTemplate', 'SimpleEmailMessageTemplate'), ('SimpleTelegramMessageTemplate1', 'SimpleTelegramMessageTemplate1'), ('SimpleTelegramMessageTemplate2', 'SimpleTelegramMessageTemplate2')], default='BaseMessageTemplate', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='TestModel1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('extra_field', models.CharField(blank=True, default='', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestModel2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('extra_field', models.CharField(blank=True, default='', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verb', models.CharField(db_index=True, max_length=128)),
                ('action_object_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('actor_object_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('target', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('action_object_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_object', to='contenttypes.ContentType')),
                ('actor_object_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_object', to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backends', models.ManyToManyField(blank=True, help_text='Backend that specified for this subscription.\n Important: Make sure that this backend message_template content can be adaptable to the trigger context', to='django_signal_notifier.Backend', verbose_name='Backend')),
                ('receiver_groups', models.ManyToManyField(blank=True, help_text='Groups that are related to this subscription.', to='auth.Group', verbose_name='Receiver_Groups')),
                ('receiver_users', models.ManyToManyField(blank=True, help_text='Users that are related to this subscription.', to=settings.AUTH_USER_MODEL, verbose_name='Receiver_Users')),
                ('trigger', models.ForeignKey(help_text='Trigger that is related to this subscription.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='django_signal_notifier.Trigger')),
            ],
        ),
    ]
